---
layout: default
title:  "Advanced Programming Assessment Part 3"
date:   2023-12-18 10:06:00 -0400
categories: blog
---
Today, I covered the __Advanced Programming Assessment__ from the [programmingexpert.io][course-site] course.

""""""

# Exercise Three - Generate String

""""""

Write a generator that accepts a string and an integer called __frequency__ and generates a sequence as follows: __string[0] * frequency + string[1] * frequency + ... + string[-2] * frequency + string[-1] * frequency__. The generator should _not_ store this string, it should generate the next element in the sequence each time its __next__ method is called.

Create this generator in both a functional and class based way. The functional generator should be named __generate_string__ and the class based generator (a.k.a. iterator) should be named __GenerateString__.

Assume that __frequency >= 0__.

Sample Input #1:

    string = "hello"
    frequency = 3

Sample Output #1:

    "hhheeellllllooo"  # The sequence that shoud be generated by both generators

""""""

My Solution for Exercise Three:

    def generate_string(string, frequency):
        current = 0
        while current < len(string):
            yield string[current] * frequency
            current += 1

    class GenerateString:
        def __init__(self, string, frequency):
            self.string = string
            self.frequency = frequency

        def __iter__(self):
            self.current = 0
            return self

        def __next__(self):
            self.current += 1
            if self.current - 1 < len(self.string):  #  -1 is used to correct the index
                return self.string[self.current - 1] * self.frequency
            else:
                raise StopIteration

""""""

[course-site]: https://www.programmingexpert.io/index