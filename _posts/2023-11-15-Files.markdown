---
layout: default
title:  "Files"
date:   2023-11-15 17:25:00 -0400
categories: blog
---

Today, I cover __Files__ from the [programmingexpert.io][course-site] course.

""""""

# Notes

- If a file is in the same directory as the \_\_main\_\_ module, it can be accessed via its name. If it is not in the same directory you need to supply the path.

- If you __open(filename, mode)__ a file do not forget to file.__close()__ it. Using the "context manager" __with__ will close the file for you after the "with" block has ran.

- After opening a file, __file.read()__ returns the file as a string of text. An integer can be passed to .read(n) to get the first n characters of the file.

- After opening a file, __file.readlines()__ returns a list with each element being a line of the file as a string.

- string.__strip()__ removes the white spaces characters from the ends of the string.

- file.__replace("\n", " ")__ is great for removing the new line characters from a string.

- file.__seek(0)__ puts the cursor at the _beginning_ of the file, file.__seek(1)__ puts the cursor at the _current_ reference point and file.__seek(2)__ puts the cursor at the _end_ of the file. These can be useful when writing to a file.

- Looping through the lines of text can be useful.

<u>open(filename, mode)<u>

- "r": Opens a file for reading and places the file cursor at the start of the file.

- "w": Opens a file for writing by creating a new file. This will override existing files and place the file cursor at the start of the new file.

- "a": Opens a file for appending. This opens an existing file and places the file cursor at the end of the file.

- "r+": Opens a file for both writing and reading and places the file cursor at the start of the file.

""""""

# Reading Files Exercise

""""""

Open a filed named __"programmingExpert.txt"__ that is located in the __data__ directory and __print__ how many words are present in the file.

Escape characters like __\n__ and __\t__, periods, commas and dashes (-) are not considered words. Assume that all other text in the file that is separated by a space is a word.

- The approach to this one is to replace all the characters that are not words with spaces and empty strings. Then split the string into a list using a space as the delimiter. Next subtract the number of empty strings from the total length of the list to get the final number of words.

Solution:

    text = ""

    with open("data/programmingExpert.txt", "r") as file:
        text = file.read()

    escape_characters_removed = text.replace("\n", " ").replace("\t", " ")

    punctuation_removed = escape_characters_removed.replace(",", "").replace("-", "").replace(".", "")

    words = punctuation_removed.split(" ")
    empty_strings = words.count("")
    number_of_words = len(words) - empty_strings

    print(number_of_words)

""""""

# Writing To Files Exercise

""""""

Within the current directory create a new file named __"programmingExpert.txt"__ that contains the squares of numbers in the range __1__ to __50__, each on new line.

Solution:
    
    with open("programmingExpert.txt", "w") as file:
        for i in range(1,51):
            square = i * i
            file.write(str(square) + "\n")

Alternate Solution:

    # Copyright Â© 2022 AlgoExpert LLC. All rights reserved.

    file = open("programmingExpert.txt", "w")

    for num in range(1, 51):
        square = num ** 2
        file.write(str(square) + "\n")

    file.close()    

""""""

[course-site]: https://www.programmingexpert.io/index